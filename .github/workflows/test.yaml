name: Test

on:
  push:
    branches: ["main"]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name:
      Test ${{ matrix.target.description }} ${{ matrix.rust.description }} ${{
      matrix.features.description }}

    runs-on: ${{ matrix.target.os }}

    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        target:
          - {
              os: ubuntu-latest,
              target: wasm32-unknown-unknown,
              description: Chrome,
              name: CHROMEDRIVER,
              value: chromedriver,
            }
          - {
              os: ubuntu-latest,
              target: wasm32-unknown-unknown,
              description: Firefox,
              name: GECKODRIVER,
              value: geckodriver,
            }
          - {
              os: macos-latest,
              target: wasm32-unknown-unknown,
              description: Safari,
              name: SAFARIDRIVER,
              value: safaridriver,
            }
        rust:
          - { version: stable }
          - {
              version: nightly,
              description: with Atomics,
              component: --component rust-src,
              flags: "-Ctarget-feature=+atomics,+bulk-memory",
              build-std: true,
            }
        features:
          - { features: "", no_std: false }
          - { features: --no-default-features, no_std: true, description: "(`no_std`)" }
        include:
          - target:
              {
                os: ubuntu-latest,
                target: x86_64-unknown-linux-gnu,
                description: Native,
                native: true,
              }
            rust: { version: stable }
            features: { features: "", no_std: false }

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install `wasm-bindgen-cli`
        uses: taiki-e/install-action@v2
        with:
          tool: wasm-bindgen-cli
      - name: Install Rust
        run: |
          rustup toolchain install ${{ matrix.rust.version }} --profile minimal ${{ matrix.rust.component }} --target ${{ matrix.target.target }}
          rustup default ${{ matrix.rust.version }}
      - name: Set `build-std` components
        if: matrix.rust.build-std == true && matrix.features.no_std == false
        run: echo "BUILD_STD_COMPONENTS=-Zbuild-std=panic_abort,std" >> $GITHUB_ENV
      - name: Set `build-std` `no_std` components
        if: matrix.rust.build-std == true && matrix.features.no_std == true
        run: echo "BUILD_STD_COMPONENTS=-Zbuild-std=core,alloc" >> $GITHUB_ENV
      - name: Set Driver
        if: matrix.target.native == false
        run: echo "${{ matrix.target.name }}=${{ matrix.target.value }}" >> $GITHUB_ENV
      - name: Test
        env:
          RUSTFLAGS: ${{ matrix.rust.flags }}
        run:
          cargo test --features serde ${{ matrix.features.features }} --target ${{
          matrix.target.target }} $BUILD_STD_COMPONENTS --workspace --all-targets

  doctest:
    name:
      Doctest ${{ matrix.target.description }} ${{ matrix.rust.description }} ${{
      matrix.features.description }}

    runs-on: ${{ matrix.target.os }}

    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        target:
          - {
              os: ubuntu-latest,
              target: wasm32-unknown-unknown,
              description: Chrome,
              name: CHROMEDRIVER,
              value: chromedriver,
            }
          - {
              os: ubuntu-latest,
              target: wasm32-unknown-unknown,
              description: Firefox,
              name: GECKODRIVER,
              value: geckodriver,
            }
          - {
              os: macos-latest,
              target: wasm32-unknown-unknown,
              description: Safari,
              name: SAFARIDRIVER,
              value: safaridriver,
            }
        rust:
          - { version: nightly }
          - {
              version: nightly,
              description: with Atomics,
              component: --component rust-src,
              flags: "-Ctarget-feature=+atomics,+bulk-memory",
              build-std: true,
            }
        features:
          - { features: "", no_std: false }
          - { features: --no-default-features, no_std: true, description: "(`no_std`)" }
        include:
          - target:
              {
                os: ubuntu-latest,
                target: x86_64-unknown-linux-gnu,
                description: Native,
                native: true,
              }
            rust: { version: stable }
            features: { features: "", no_std: false }

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install `wasm-bindgen-cli`
        uses: taiki-e/install-action@v2
        with:
          tool: wasm-bindgen-cli
      - name: Install Rust
        run: |
          rustup toolchain install ${{ matrix.rust.version }} --profile minimal ${{ matrix.rust.component }} --target ${{ matrix.target.target }}
          rustup default ${{ matrix.rust.version }}
      - name: Set `build-std` components
        if: matrix.rust.build-std == true && matrix.features.no_std == false
        run: echo "BUILD_STD_COMPONENTS=-Zbuild-std=panic_abort,std" >> $GITHUB_ENV
      - name: Set `build-std` `no_std` components
        if: matrix.rust.build-std == true && matrix.features.no_std == true
        run: echo "BUILD_STD_COMPONENTS=-Zbuild-std=core,alloc" >> $GITHUB_ENV
      - name: Set Driver and enable cross-compilation
        if: matrix.target.native == false
        run: |
          echo "${{ matrix.target.name }}=${{ matrix.target.value }}" >> $GITHUB_ENV
          echo "DOCTEST_XCOMPILE_ARG=-Zdoctest-xcompile" >> $GITHUB_ENV
      - name: Doctest
        env:
          RUSTFLAGS: ${{ matrix.rust.flags }}
          RUSTDOCFLAGS: ${{ matrix.rust.flags }}
        run:
          cargo test --features serde ${{ matrix.features.features }} --target ${{
          matrix.target.target }} $BUILD_STD_COMPONENTS --workspace --doc ${{ matrix.target.args }}
          $DOCTEST_XCOMPILE_ARG
